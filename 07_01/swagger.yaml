openapi: 3.0.0
info:
  title: 07_01 REST API
  version: 1.0.0
  description: |
    07_01 Node.js + Express + Sequelize + JWT + Multer 기반 REST API

servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        password: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Post:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        content: { type: string }
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        authorId: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Attachment:
      type: object
      properties:
        filename: { type: string }
        originalname: { type: string }
        path: { type: string }
        size: { type: integer }
        mimetype: { type: string }
    Comment:
      type: object
      properties:
        id: { type: integer }
        content: { type: string }
        postId: { type: integer }
        userId: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Todo:
      type: object
      properties:
        id: { type: integer }
        task: { type: string }
        description: { type: string }
        completed: { type: boolean }
        priority: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Note:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        content: { type: string }
        tag: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

paths:
  /auth/register:
    post:
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                name: { type: string }
                password: { type: string }
      responses:
        "201":
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /auth/login:
    post:
      summary: 로그인 (JWT 토큰 발급)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200":
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }

  /users:
    get:
      summary: 전체 유저 조회
      responses:
        "200":
          description: 유저 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /posts:
    post:
      summary: 게시글 작성 (파일 첨부 가능)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: 게시글 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
    get:
      summary: 게시글 전체 조회
      responses:
        "200":
          description: 게시글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /posts/{id}:
    get:
      summary: 게시글 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 게시글 상세
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: 게시글 없음
    put:
      summary: 게시글 수정 (파일 첨부 가능)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: 게시글 없음
    delete:
      summary: 게시글 삭제
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 삭제 성공
        "404":
          description: 게시글 없음

  /posts/{postId}/comment:
    post:
      summary: 댓글 작성
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "201":
          description: 댓글 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: 게시글 없음

  /posts/{postId}/comments:
    get:
      summary: 댓글 목록 조회
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 댓글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"

  /posts/{postId}/comments/{id}:
    put:
      summary: 댓글 수정
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer }
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "200":
          description: 댓글 수정 성공
        "404":
          description: 댓글/게시글 없음
    delete:
      summary: 댓글 삭제
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer }
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204":
          description: 삭제 성공
        "404":
          description: 댓글/게시글 없음

  /todos:
    post:
      summary: 할 일(todo) 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task: { type: string }
                description: { type: string }
      responses:
        "201":
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
    get:
      summary: 할 일 목록 조회
      responses:
        "200":
          description: 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"

  /todos/{id}:
    get:
      summary: 할 일 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 상세
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: 없음
    put:
      summary: 할 일 수정
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task: { type: string }
                description: { type: string }
                completed: { type: boolean }
                priority: { type: integer }
      responses:
        "200":
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: 없음
    delete:
      summary: 할 일 삭제
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 삭제 성공
        "404":
          description: 없음

  /notes:
    post:
      summary: 노트 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                tag: { type: string }
      responses:
        "201":
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
    get:
      summary: 노트 목록 조회
      responses:
        "200":
          description: 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"

  /notes/{id}:
    get:
      summary: 노트 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 상세
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "404":
          description: 없음
    put:
      summary: 노트 수정
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                tag: { type: string }
      responses:
        "200":
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "404":
          description: 없음
    delete:
      summary: 노트 삭제
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: 삭제 성공
        "404":
          description: 없음
